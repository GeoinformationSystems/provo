'''
@author Arne RÃ¼mmler
@organization TU Dresden
@contact arne.ruemmler@tu-dresden.de


@summery Subclass of an rdflib graph, tailored to generate provenance graphs according to PROV-O.
    Works in tandem with provClasses.py
@status Prototype
'''

from rdflib import *
from rdflib.namespace import *
from rdflib.plugins.sparql import prepareQuery


# setup namespaces
PROV = Namespace("http://www.w3.org/ns/prov#")

class ProvGraph(Graph):
    """ A child class of an rdflib.Graph. Designed to simplify the constrcution of 
    provenance graphs according to PROV-O. 
    
    An instance of this class is required as input for the classes Activity, 
    Agent and Entity.
    """
    CNS = Namespace("https://customNamespace.com/")
    def __init__(self, store='default', namespace = None, identifier=None, namespace_manager=None):
        """ 
        Parameters
        ----------
        namespace: str, OPTIONAL
            e.g.: https://myprovenancegraphsnodes.org/"
            defaults to: "https://customNamespace.com/"
            In the RDF File the shorthand for the namespace will always be 'CNS'. Every
            Entity, Activity and Agent that is created with an instance of this class is
            assigned this namespace.
        """
        
        super().__init__(store=store, identifier=identifier, namespace_manager=namespace_manager)
        if namespace:
            self.CNS = Namespace(namespace)
        self.bind("dc", DC)
        self.bind("foaf", FOAF)
        self.bind("rdf", RDF)
        self.bind("rdfs", RDFS)
        self.bind("prov", PROV)
        self.bind("cns", self.CNS)

    def getCNS(self): return self.CNS

    def link(self, inputs = None, process = None, outputs = None, agents = None, inference = True):
        """ Helper utility to construct all possible properties according to 
        PROV-O between a set of Agents, Input Entities, Output Entities and a 
        single Activity that connects them.
        Also adds wasInformedBy properties between activities if the need arises.

        Parameters
        ----------
        inputs: Entity / List of Entity
            Entities that are used by the Activity.
        process: Activity
            The Activity (that build the center for the properties to generate).
        outputs: Entity / List of Entity
            Entities that were generated by the Activity.
        agents: Agents / List of Agent 
            Agents that the Activity is associated with.
        inference: If True: Looks on every call if there are missing wasInformedBy-
            relations in the graph and constructs them accordingly. Disable on automated
            calls, complexity with this option is exponential. Only setting it True on 
            last call also constructs all missing links.
        """

        # convert every singular input to a list
        if inputs:
            if not isinstance(inputs, list):
                inputs = [inputs]
        if outputs:
            if not isinstance(outputs, list):
                outputs = [outputs]
        if agents:
            if not isinstance(agents,list):
                agents = [agents]

        # construct PROV-O properties
        if (inputs and process):
            for entity in inputs:
                process.used(entity)
        if (outputs and process):
            for entity in outputs:
                entity.wasGeneratedBy(process)
        if (inputs and outputs):
            for inp in inputs:
                for out in outputs:
                    out.wasDerivedFrom(inp)
        if (agents and inputs): 
            for agent in agents:
                for inp in inputs:
                    inp.wasAttributedTo(agent)
        if (agents and outputs):
            for agent in agents:
                for output in outputs:
                    output.wasAttributedTo(agent)
        if (agents and process):
            for agent in agents:
                process.wasAssociatedWith(agent)

        if inference == True:
            ''' Disable on applications that automatically call link() 
            (e.g. 10000 times), in this case performance decreases rapidly. 
            Only set it True for the last link()-call.
            '''
            # construct was informed links
            qRes = self.query(
                """SELECT ?p ?pp
                WHERE {
                    ?p prov:used ?data .
                    ?data prov:wasGeneratedBy ?pp .
                }"""
            )
            for row in qRes:
                self.add((row[0], PROV.wasInformedBy, row[1]))
        